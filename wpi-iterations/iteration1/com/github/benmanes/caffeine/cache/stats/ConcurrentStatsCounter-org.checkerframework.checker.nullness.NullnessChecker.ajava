/*
 * Copyright 2014 Ben Manes. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.benmanes.caffeine.cache.stats;

import java.util.concurrent.atomic.LongAdder;
import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;
import com.github.benmanes.caffeine.cache.Cache;

/**
 * A thread-safe {@link StatsCounter} implementation for use by {@link Cache} implementors.
 *
 * @author ben.manes@gmail.com (Ben Manes)
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public final class ConcurrentStatsCounter implements StatsCounter {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LongAdder hitCount;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LongAdder missCount;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LongAdder loadSuccessCount;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LongAdder loadFailureCount;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LongAdder totalLoadTime;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LongAdder evictionCount;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LongAdder evictionWeight;

    /**
     * Constructs an instance with all counts initialized to zero.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public ConcurrentStatsCounter() {
        hitCount = new LongAdder();
        missCount = new LongAdder();
        loadSuccessCount = new LongAdder();
        loadFailureCount = new LongAdder();
        totalLoadTime = new LongAdder();
        evictionCount = new LongAdder();
        evictionWeight = new LongAdder();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void recordHits(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConcurrentStatsCounter this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int count) {
        hitCount.add(count);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void recordMisses(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConcurrentStatsCounter this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int count) {
        missCount.add(count);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void recordLoadSuccess(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConcurrentStatsCounter this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long loadTime) {
        loadSuccessCount.increment();
        totalLoadTime.add(loadTime);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void recordLoadFailure(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConcurrentStatsCounter this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long loadTime) {
        loadFailureCount.increment();
        totalLoadTime.add(loadTime);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void recordEviction(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConcurrentStatsCounter this) {
        evictionCount.increment();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void recordEviction(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConcurrentStatsCounter this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int weight) {
        evictionCount.increment();
        evictionWeight.add(weight);
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CacheStats snapshot(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConcurrentStatsCounter this) {
        return new CacheStats(hitCount.sum(), missCount.sum(), loadSuccessCount.sum(), loadFailureCount.sum(), totalLoadTime.sum(), evictionCount.sum(), evictionWeight.sum());
    }

    /**
     * Increments all counters by the values in {@code other}.
     *
     * @param other the counter to increment from
     */
    @org.checkerframework.dataflow.qual.Impure
    public void incrementBy(StatsCounter other) {
        CacheStats otherStats = other.snapshot();
        hitCount.add(otherStats.hitCount());
        missCount.add(otherStats.missCount());
        loadSuccessCount.add(otherStats.loadSuccessCount());
        loadFailureCount.add(otherStats.loadFailureCount());
        totalLoadTime.add(otherStats.totalLoadTime());
        evictionCount.add(otherStats.evictionCount());
        evictionWeight.add(otherStats.evictionWeight());
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String toString(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConcurrentStatsCounter this) {
        return snapshot().toString();
    }
}
